{"version":3,"file":"static/js/4284.edb6c8c455c7581d6fff.js","mappings":"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","sources":["webpack://pro-react-admin/./node_modules/mermaid/dist/stateDiagram-v2-8bb05ecb.js"],"sourcesContent":["import { D as DEFAULT_STATE_TYPE, a as DIVIDER_TYPE, S as STMT_RELATION, b as STMT_STATE, c as DEFAULT_NESTED_DOC_DIR, p as parser, d as db, s as styles } from \"./styles-24dfea38.js\";\nimport * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { select } from \"d3\";\nimport { l as log, c as getConfig, u as utils, i as configureSvgSize, e as common } from \"./mermaid-0d192ec3.js\";\nimport { r as render } from \"./index-f9462f3f.js\";\nimport \"ts-dedent\";\nimport \"dayjs\";\nimport \"@braintree/sanitize-url\";\nimport \"dompurify\";\nimport \"khroma\";\nimport \"lodash-es/memoize.js\";\nimport \"lodash-es/merge.js\";\nimport \"stylis\";\nimport \"lodash-es/isEmpty.js\";\nimport \"dagre-d3-es/src/dagre/index.js\";\nimport \"dagre-d3-es/src/graphlib/json.js\";\nimport \"./edges-f15a7e05.js\";\nimport \"./createText-80c3befb.js\";\nimport \"mdast-util-from-markdown\";\nconst SHAPE_STATE = \"rect\";\nconst SHAPE_STATE_WITH_DESC = \"rectWithTitle\";\nconst SHAPE_START = \"start\";\nconst SHAPE_END = \"end\";\nconst SHAPE_DIVIDER = \"divider\";\nconst SHAPE_GROUP = \"roundedWithTitle\";\nconst SHAPE_NOTE = \"note\";\nconst SHAPE_NOTEGROUP = \"noteGroup\";\nconst CSS_DIAGRAM = \"statediagram\";\nconst CSS_STATE = \"state\";\nconst CSS_DIAGRAM_STATE = `${CSS_DIAGRAM}-${CSS_STATE}`;\nconst CSS_EDGE = \"transition\";\nconst CSS_NOTE = \"note\";\nconst CSS_NOTE_EDGE = \"note-edge\";\nconst CSS_EDGE_NOTE_EDGE = `${CSS_EDGE} ${CSS_NOTE_EDGE}`;\nconst CSS_DIAGRAM_NOTE = `${CSS_DIAGRAM}-${CSS_NOTE}`;\nconst CSS_CLUSTER = \"cluster\";\nconst CSS_DIAGRAM_CLUSTER = `${CSS_DIAGRAM}-${CSS_CLUSTER}`;\nconst CSS_CLUSTER_ALT = \"cluster-alt\";\nconst CSS_DIAGRAM_CLUSTER_ALT = `${CSS_DIAGRAM}-${CSS_CLUSTER_ALT}`;\nconst PARENT = \"parent\";\nconst NOTE = \"note\";\nconst DOMID_STATE = \"state\";\nconst DOMID_TYPE_SPACER = \"----\";\nconst NOTE_ID = `${DOMID_TYPE_SPACER}${NOTE}`;\nconst PARENT_ID = `${DOMID_TYPE_SPACER}${PARENT}`;\nconst G_EDGE_STYLE = \"fill:none\";\nconst G_EDGE_ARROWHEADSTYLE = \"fill: #333\";\nconst G_EDGE_LABELPOS = \"c\";\nconst G_EDGE_LABELTYPE = \"text\";\nconst G_EDGE_THICKNESS = \"normal\";\nlet nodeDb = {};\nlet graphItemCount = 0;\nconst setConf = function(cnf) {\n  const keys = Object.keys(cnf);\n  for (const key of keys) {\n    cnf[key];\n  }\n};\nconst getClasses = function(text, diagramObj) {\n  diagramObj.db.extract(diagramObj.db.getRootDocV2());\n  return diagramObj.db.getClasses();\n};\nfunction getClassesFromDbInfo(dbInfoItem) {\n  if (dbInfoItem === void 0 || dbInfoItem === null) {\n    return \"\";\n  } else {\n    if (dbInfoItem.classes) {\n      return dbInfoItem.classes.join(\" \");\n    } else {\n      return \"\";\n    }\n  }\n}\nfunction stateDomId(itemId = \"\", counter = 0, type = \"\", typeSpacer = DOMID_TYPE_SPACER) {\n  const typeStr = type !== null && type.length > 0 ? `${typeSpacer}${type}` : \"\";\n  return `${DOMID_STATE}-${itemId}${typeStr}-${counter}`;\n}\nconst setupNode = (g, parent, parsedItem, diagramStates, diagramDb, altFlag) => {\n  const itemId = parsedItem.id;\n  const classStr = getClassesFromDbInfo(diagramStates[itemId]);\n  if (itemId !== \"root\") {\n    let shape = SHAPE_STATE;\n    if (parsedItem.start === true) {\n      shape = SHAPE_START;\n    }\n    if (parsedItem.start === false) {\n      shape = SHAPE_END;\n    }\n    if (parsedItem.type !== DEFAULT_STATE_TYPE) {\n      shape = parsedItem.type;\n    }\n    if (!nodeDb[itemId]) {\n      nodeDb[itemId] = {\n        id: itemId,\n        shape,\n        description: common.sanitizeText(itemId, getConfig()),\n        classes: `${classStr} ${CSS_DIAGRAM_STATE}`\n      };\n    }\n    const newNode = nodeDb[itemId];\n    if (parsedItem.description) {\n      if (Array.isArray(newNode.description)) {\n        newNode.shape = SHAPE_STATE_WITH_DESC;\n        newNode.description.push(parsedItem.description);\n      } else {\n        if (newNode.description.length > 0) {\n          newNode.shape = SHAPE_STATE_WITH_DESC;\n          if (newNode.description === itemId) {\n            newNode.description = [parsedItem.description];\n          } else {\n            newNode.description = [newNode.description, parsedItem.description];\n          }\n        } else {\n          newNode.shape = SHAPE_STATE;\n          newNode.description = parsedItem.description;\n        }\n      }\n      newNode.description = common.sanitizeTextOrArray(newNode.description, getConfig());\n    }\n    if (newNode.description.length === 1 && newNode.shape === SHAPE_STATE_WITH_DESC) {\n      newNode.shape = SHAPE_STATE;\n    }\n    if (!newNode.type && parsedItem.doc) {\n      log.info(\"Setting cluster for \", itemId, getDir(parsedItem));\n      newNode.type = \"group\";\n      newNode.dir = getDir(parsedItem);\n      newNode.shape = parsedItem.type === DIVIDER_TYPE ? SHAPE_DIVIDER : SHAPE_GROUP;\n      newNode.classes = newNode.classes + \" \" + CSS_DIAGRAM_CLUSTER + \" \" + (altFlag ? CSS_DIAGRAM_CLUSTER_ALT : \"\");\n    }\n    const nodeData = {\n      labelStyle: \"\",\n      shape: newNode.shape,\n      labelText: newNode.description,\n      // typeof newNode.description === 'object'\n      //   ? newNode.description[0]\n      //   : newNode.description,\n      classes: newNode.classes,\n      style: \"\",\n      //styles.style,\n      id: itemId,\n      dir: newNode.dir,\n      domId: stateDomId(itemId, graphItemCount),\n      type: newNode.type,\n      padding: 15\n      //getConfig().flowchart.padding\n    };\n    nodeData.centerLabel = true;\n    if (parsedItem.note) {\n      const noteData = {\n        labelStyle: \"\",\n        shape: SHAPE_NOTE,\n        labelText: parsedItem.note.text,\n        classes: CSS_DIAGRAM_NOTE,\n        // useHtmlLabels: false,\n        style: \"\",\n        // styles.style,\n        id: itemId + NOTE_ID + \"-\" + graphItemCount,\n        domId: stateDomId(itemId, graphItemCount, NOTE),\n        type: newNode.type,\n        padding: 15\n        //getConfig().flowchart.padding\n      };\n      const groupData = {\n        labelStyle: \"\",\n        shape: SHAPE_NOTEGROUP,\n        labelText: parsedItem.note.text,\n        classes: newNode.classes,\n        style: \"\",\n        // styles.style,\n        id: itemId + PARENT_ID,\n        domId: stateDomId(itemId, graphItemCount, PARENT),\n        type: \"group\",\n        padding: 0\n        //getConfig().flowchart.padding\n      };\n      graphItemCount++;\n      const parentNodeId = itemId + PARENT_ID;\n      g.setNode(parentNodeId, groupData);\n      g.setNode(noteData.id, noteData);\n      g.setNode(itemId, nodeData);\n      g.setParent(itemId, parentNodeId);\n      g.setParent(noteData.id, parentNodeId);\n      let from = itemId;\n      let to = noteData.id;\n      if (parsedItem.note.position === \"left of\") {\n        from = noteData.id;\n        to = itemId;\n      }\n      g.setEdge(from, to, {\n        arrowhead: \"none\",\n        arrowType: \"\",\n        style: G_EDGE_STYLE,\n        labelStyle: \"\",\n        classes: CSS_EDGE_NOTE_EDGE,\n        arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n        labelpos: G_EDGE_LABELPOS,\n        labelType: G_EDGE_LABELTYPE,\n        thickness: G_EDGE_THICKNESS\n      });\n    } else {\n      g.setNode(itemId, nodeData);\n    }\n  }\n  if (parent && parent.id !== \"root\") {\n    log.trace(\"Setting node \", itemId, \" to be child of its parent \", parent.id);\n    g.setParent(itemId, parent.id);\n  }\n  if (parsedItem.doc) {\n    log.trace(\"Adding nodes children \");\n    setupDoc(g, parsedItem, parsedItem.doc, diagramStates, diagramDb, !altFlag);\n  }\n};\nconst setupDoc = (g, parentParsedItem, doc, diagramStates, diagramDb, altFlag) => {\n  log.trace(\"items\", doc);\n  doc.forEach((item) => {\n    switch (item.stmt) {\n      case STMT_STATE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case DEFAULT_STATE_TYPE:\n        setupNode(g, parentParsedItem, item, diagramStates, diagramDb, altFlag);\n        break;\n      case STMT_RELATION:\n        {\n          setupNode(g, parentParsedItem, item.state1, diagramStates, diagramDb, altFlag);\n          setupNode(g, parentParsedItem, item.state2, diagramStates, diagramDb, altFlag);\n          const edgeData = {\n            id: \"edge\" + graphItemCount,\n            arrowhead: \"normal\",\n            arrowTypeEnd: \"arrow_barb\",\n            style: G_EDGE_STYLE,\n            labelStyle: \"\",\n            label: common.sanitizeText(item.description, getConfig()),\n            arrowheadStyle: G_EDGE_ARROWHEADSTYLE,\n            labelpos: G_EDGE_LABELPOS,\n            labelType: G_EDGE_LABELTYPE,\n            thickness: G_EDGE_THICKNESS,\n            classes: CSS_EDGE\n          };\n          g.setEdge(item.state1.id, item.state2.id, edgeData, graphItemCount);\n          graphItemCount++;\n        }\n        break;\n    }\n  });\n};\nconst getDir = (parsedItem, defaultDir = DEFAULT_NESTED_DOC_DIR) => {\n  let dir = defaultDir;\n  if (parsedItem.doc) {\n    for (let i = 0; i < parsedItem.doc.length; i++) {\n      const parsedItemDoc = parsedItem.doc[i];\n      if (parsedItemDoc.stmt === \"dir\") {\n        dir = parsedItemDoc.value;\n      }\n    }\n  }\n  return dir;\n};\nconst draw = async function(text, id, _version, diag) {\n  log.info(\"Drawing state diagram (v2)\", id);\n  nodeDb = {};\n  diag.db.getDirection();\n  const { securityLevel, state: conf } = getConfig();\n  const nodeSpacing = conf.nodeSpacing || 50;\n  const rankSpacing = conf.rankSpacing || 50;\n  log.info(diag.db.getRootDocV2());\n  diag.db.extract(diag.db.getRootDocV2());\n  log.info(diag.db.getRootDocV2());\n  const diagramStates = diag.db.getStates();\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: getDir(diag.db.getRootDocV2()),\n    nodesep: nodeSpacing,\n    ranksep: rankSpacing,\n    marginx: 8,\n    marginy: 8\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  setupNode(g, void 0, diag.db.getRootDocV2(), diagramStates, diag.db, true);\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const svg = root.select(`[id=\"${id}\"]`);\n  const element = root.select(\"#\" + id + \" g\");\n  await render(element, g, [\"barb\"], CSS_DIAGRAM, id);\n  const padding = 8;\n  utils.insertTitle(svg, \"statediagramTitleText\", conf.titleTopMargin, diag.db.getDiagramTitle());\n  const bounds = svg.node().getBBox();\n  const width = bounds.width + padding * 2;\n  const height = bounds.height + padding * 2;\n  svg.attr(\"class\", CSS_DIAGRAM);\n  const svgBounds = svg.node().getBBox();\n  configureSvgSize(svg, height, width, conf.useMaxWidth);\n  const vBox = `${svgBounds.x - padding} ${svgBounds.y - padding} ${width} ${height}`;\n  log.debug(`viewBox ${vBox}`);\n  svg.attr(\"viewBox\", vBox);\n  const labels = document.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n  for (const label of labels) {\n    const dim = label.getBBox();\n    const rect = document.createElementNS(\"http://www.w3.org/2000/svg\", SHAPE_STATE);\n    rect.setAttribute(\"rx\", 0);\n    rect.setAttribute(\"ry\", 0);\n    rect.setAttribute(\"width\", dim.width);\n    rect.setAttribute(\"height\", dim.height);\n    label.insertBefore(rect, label.firstChild);\n  }\n};\nconst renderer = {\n  setConf,\n  getClasses,\n  draw\n};\nconst diagram = {\n  parser,\n  db,\n  renderer,\n  styles,\n  init: (cnf) => {\n    if (!cnf.state) {\n      cnf.state = {};\n    }\n    cnf.state.arrowMarkerAbsolute = cnf.arrowMarkerAbsolute;\n    db.clear();\n  }\n};\nexport {\n  diagram\n};\n"],"names":["SHAPE_STATE","SHAPE_STATE_WITH_DESC","SHAPE_START","SHAPE_END","SHAPE_DIVIDER","SHAPE_GROUP","SHAPE_NOTE","SHAPE_NOTEGROUP","CSS_DIAGRAM","CSS_DIAGRAM_STATE","CSS_EDGE","CSS_NOTE","CSS_EDGE_NOTE_EDGE","CSS_DIAGRAM_NOTE","CSS_DIAGRAM_CLUSTER","CSS_DIAGRAM_CLUSTER_ALT","PARENT","NOTE","DOMID_STATE","DOMID_TYPE_SPACER","NOTE_ID","PARENT_ID","G_EDGE_STYLE","G_EDGE_ARROWHEADSTYLE","G_EDGE_LABELPOS","G_EDGE_LABELTYPE","G_EDGE_THICKNESS","nodeDb","graphItemCount","setConf","cnf","keys","key","getClasses","text","diagramObj","getClassesFromDbInfo","dbInfoItem","stateDomId","itemId","counter","type","typeSpacer","typeStr","setupNode","g","parent","parsedItem","diagramStates","diagramDb","altFlag","classStr","shape","newNode","getDir","nodeData","noteData","groupData","parentNodeId","from","to","setupDoc","parentParsedItem","doc","item","edgeData","defaultDir","dir","i","parsedItemDoc","renderer","id","_version","diag","securityLevel","conf","nodeSpacing","rankSpacing","sandboxElement","root","svg","element","padding","bounds","width","height","svgBounds","vBox","labels","label","dim","rect","diagram"],"sourceRoot":""}